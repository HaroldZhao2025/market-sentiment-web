name: Build Data & Deploy Site

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      mode:
        description: "Run mode"
        required: true
        default: "sample"
        type: choice
        options: ["sample", "full"]
  schedule:
    - cron: "0 12 * * 1"

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

env:
  PYTHONPATH: src
  HF_HUB_DISABLE_TELEMETRY: "1"
  NEXT_PUBLIC_BASE_PATH: "/market-sentiment-web"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install --no-cache-dir "torch==2.3.1" --index-url https://download.pytorch.org/whl/cpu
          pip install --no-cache-dir -r requirements.txt
          pip check

      - name: Set HF cache dir
        run: echo "HF_HOME=$RUNNER_TEMP/hf-home" >> $GITHUB_ENV

      - name: Set dates (â‰ˆ last 250 trading days)
        run: |
          python - <<'PY'
          import os
          from datetime import datetime, timedelta, timezone
          start=(datetime.now(timezone.utc)-timedelta(days=365)).strftime('%Y-%m-%d')
          end=datetime.now(timezone.utc).strftime('%Y-%m-%d')
          with open(os.environ['GITHUB_ENV'],'a') as f:
              f.write(f"START={start}\nEND={end}\n")
          print("START", start, "END", end)
          PY

      - name: Build S&P 500 universe
        run: python -m market_sentiment.cli.build_universe --out data/sp500.csv

      - name: Select mode (sample/full)
        id: sel
        run: |
          if [ "${{ inputs.mode }}" = "sample" ]; then
            echo "MODE=sample" >> $GITHUB_ENV
            echo "TICKER_CSV=data/sample_one.csv" >> $GITHUB_ENV
            printf "symbol\nAAPL\n" > data/sample_one.csv
          else
            echo "MODE=full" >> $GITHUB_ENV
            echo "TICKER_CSV=data/sp500.csv" >> $GITHUB_ENV
          fi
          echo "Mode: ${{ inputs.mode }}  Universe: $TICKER_CSV"

      # ðŸ”Ž SMOKE TEST: is news fetch working? is FinBERT scoring non-zero?
      - name: News / FinBERT smoke test (AAPL)
        env:
          HF_HOME: ${{ env.HF_HOME }}
        run: |
          python - <<'PY'
          import pandas as pd
          import yfinance as yf
          from market_sentiment.news import fetch_news
          try:
              from market_sentiment.finbert import FinBERT
          except Exception:
              FinBERT = None

          START="${{ env.START }}"
          END="${{ env.END }}"

          print("== Smoke: yfinance AAPL raw news length ==")
          try:
              print(len(yf.Ticker("AAPL").news or []))
          except Exception as e:
              print("yf error:", e)

          print("== Smoke: multi-source fetch_news(AAPL) ==")
          df = fetch_news("AAPL", START, END, company="Apple Inc.", max_per_provider=30, max_workers=6)
          print("rows:", len(df))
          print(df[["ts","title"]].tail(3).to_string(index=False))

          if len(df) > 0 and FinBERT is not None:
              texts = df["text"].fillna(df["title"]).astype(str).tolist()[:8]
              try:
                  fb = FinBERT()
                  try:
                      S = fb.score(texts, batch=8)
                  except TypeError:
                      S = fb.score(texts)
                  s = pd.Series(S).astype(float)
                  print("FinBERT S sample:", s.round(4).tolist())
                  print("S mean:", float(s.mean()), "nonzero:", int((s.abs()>1e-12).sum()))
              except Exception as e:
                  print("FinBERT error:", e)
          else:
              print("Skip FinBERT (no texts or FinBERT missing).")
          PY

      - name: Build JSON (FinBERT + news + earnings)
        env:
          HF_HOME: ${{ env.HF_HOME }}
        run: |
          set -euxo pipefail
          python -m market_sentiment.cli.build_json \
            --universe "$TICKER_CSV" \
            --start "$START" --end "$END" \
            --out apps/web/public/data \
            --batch 16 \
            --cutoff-minutes 5 \
            --max-workers 8

      - name: Inspect output (AAPL sample)
        run: |
          set -e
          echo "== List data dir =="
          ls -lah apps/web/public/data
          python - <<'PY'
          import json, os
          base="apps/web/public/data"
          aapl=os.path.join(base,"ticker","AAPL.json")
          if os.path.exists(aapl):
              obj=json.load(open(aapl))
              S=obj.get("S") or obj.get("sentiment") or []
              nz=sum(1 for x in S if abs(x or 0)>1e-12)
              print("AAPL sentiment sample: len=",len(S)," non_zero=",nz," first=",S[0] if S else None," last=",S[-1] if S else None)
              print("AAPL news items:", len(obj.get("news") or []))
          else:
              print("AAPL.json not found.")
          PY

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install web deps
        working-directory: apps/web
        run: npm install --no-audit --no-fund

      - name: Build static site (Next.js output: export)
        working-directory: apps/web
        env:
          NEXT_TELEMETRY_DISABLED: "1"
          NEXT_PUBLIC_BASE_PATH: ${{ env.NEXT_PUBLIC_BASE_PATH }}
        run: |
          set -euxo pipefail
          echo "==== next.config.cjs (contents) ===="
          cat next.config.cjs || true
          echo "==== Node/NPM ===="
          node -v
          npm -v
          echo "==== Building ===="
          npm run build
          echo "==== After build (ls) ===="
          ls -lah
          if [ ! -d out ]; then
            echo "Warning: No 'out/' after build; synthesizing static export from '.next'..."
            mkdir -p out
            rsync -a .next/static out/_next/static || true
            find .next/server/app -maxdepth 2 -name 'index.html' -exec bash -lc 'd=${1%.html}; d=${d#.next/server/app}; mkdir -p "out/$d"; cp "$1" "out/$d/index.html"' _ {} \; || true
            cp -r public/data out/data || true
            cp -r public/earnings out/earnings || true
            cp -r public/ticker out/ticker || true
            cp -r public/portfolio out/portfolio || true
          fi
          echo "==== Final out/ listing ===="
          ls -lah out

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: apps/web/out

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
