name: Build Data & Deploy Site

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      mode:
        description: "Run mode: sample (AAPL) or full (S&P500)"
        required: true
        default: "sample"
        type: choice
        options: ["sample", "full"]
      yfinance_count:
        description: "Yahoo Finance items per ticker (saved + used by CLI)"
        required: false
        default: "240"
        type: choice
        options: ["120", "180", "200", "220", "240"]
      finnhub_rps:
        description: "Finnhub requests per second (≤30)"
        required: false
        default: "8"
        type: choice
        options: ["5", "8", "10", "15", "20", "30"]
      max_days_per_ticker:
        description: "Historical backfill days per ticker (Finnhub-only backfill)"
        required: false
        default: "365"
        type: choice
        options: ["120", "180", "240", "300", "365"]
  schedule:
    - cron: "0 12 * * 1" # Mondays 12:00 UTC

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

env:
  PYTHONPATH: src
  HF_HUB_DISABLE_TELEMETRY: "1"
  NEXT_PUBLIC_BASE_PATH: "/market-sentiment-web"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Python & deps ----------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install --no-cache-dir "torch==2.3.1" --index-url https://download.pytorch.org/whl/cpu
          pip install --no-cache-dir -r requirements.txt
          pip install --no-cache-dir finnhub-python yfinance

      - name: Configure HF cache
        run: echo "HF_HOME=$RUNNER_TEMP/hf-home" >> "$GITHUB_ENV"

      - name: Set date range (last 365 days)
        shell: python
        run: |
          import os
          from datetime import datetime, timedelta, timezone
          start=(datetime.now(timezone.utc)-timedelta(days=365)).strftime('%Y-%m-%d')
          end=datetime.now(timezone.utc).strftime('%Y-%m-%d')
          with open(os.environ['GITHUB_ENV'],'a') as f:
              f.write(f"START={start}\nEND={end}\n")
          print("START", start, "END", end)

      - name: Select mode and universe
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data
          MODE="${{ github.event.inputs.mode }}"
          if [ -z "${MODE:-}" ]; then MODE="sample"; fi
          if [ "$MODE" = "full" ]; then
            TICKER_CSV="data/sp500.csv"
          else
            TICKER_CSV="data/sample_one.csv"
            printf "ticker\nAAPL\n" > "$TICKER_CSV"
          fi
          echo "MODE=$MODE" >> "$GITHUB_ENV"
          echo "TICKER_CSV=$TICKER_CSV" >> "$GITHUB_ENV"
          echo "Mode: $MODE | Universe: $TICKER_CSV"

      - name: Generate S&P500 CSV if needed (MODE=full; multi-source, 403-safe)
        if: env.MODE == 'full'
        shell: python
        run: |
          import os, sys, pandas as pd, requests
          from pathlib import Path

          outp = Path("data/sp500.csv")
          if outp.exists() and outp.stat().st_size > 0:
              print(f"{outp} already exists; skipping fetch.")
              sys.exit(0)

          UA = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 Safari/537.36"}
          candidates = []

          try:
              print("Trying Wikipedia…")
              r = requests.get("https://en.wikipedia.org/wiki/List_of_S%26P_500_companies", headers=UA, timeout=30)
              r.raise_for_status()
              tables = pd.read_html(r.text)
              df = next((t for t in tables if "Symbol" in t.columns), None)
              if df is not None:
                  candidates.append(df["Symbol"].astype(str))
                  print(f"Wikipedia ok: {len(df)} rows")
          except Exception as e:
              print("Wikipedia failed:", e)

          try:
              print("Trying Slickcharts…")
              r = requests.get("https://www.slickcharts.com/sp500", headers=UA, timeout=30)
              r.raise_for_status()
              tables = pd.read_html(r.text)
              df = next((t for t in tables if "Symbol" in t.columns), tables[0] if tables else None)
              if df is not None:
                  candidates.append(df[( "Symbol" if "Symbol" in df.columns else df.columns[0])].astype(str))
                  print(f"Slickcharts ok: {len(df)} rows")
          except Exception as e:
              print("Slickcharts failed:", e)

          for url in [
              "https://raw.githubusercontent.com/datasets/s-and-p-500-companies/main/data/constituents.csv",
              "https://raw.githubusercontent.com/datasets/s-and-p-500-companies/master/data/constituents.csv",
          ]:
              try:
                  print("Trying dataset:", url)
                  df = pd.read_csv(url)
                  col = "Symbol" if "Symbol" in df.columns else ("symbol" if "symbol" in df.columns else None)
                  if col:
                      candidates.append(df[col].astype(str))
                      print(f"Dataset ok: {len(df)} rows")
                      break
              except Exception as e:
                  print("Dataset failed:", e)

          if not candidates:
              raise RuntimeError("All sources failed; commit data/sp500.csv to repo.")

          ser = pd.concat(candidates, ignore_index=True)
          ser = (ser.str.upper().str.replace(".", "-", regex=False).str.strip())
          uniq = sorted(set(x for x in ser if x))
          outp.parent.mkdir(parents=True, exist_ok=True)
          outp.write_text("ticker\n" + "\n".join(uniq) + "\n", encoding="utf-8")
          print(f"Wrote {len(uniq)} tickers to {outp}")

      # ---------- HISTORICAL BACKFILL (SAVE FILES) ----------
      - name: Backfill historical Finnhub per-day JSON
        env:
          FINNHUB_TOKEN: ${{ secrets.FINNHUB_TOKEN }}
          FINNHUB_RPS: ${{ github.event.inputs.finnhub_rps }}
          MAX_DAYS_PER_TICKER: ${{ github.event.inputs.max_days_per_ticker }}
        shell: python
        run: |
          import os, time, json, pandas as pd
          from pathlib import Path

          try:
              import finnhub
          except Exception:
              finnhub = None

          START = os.environ["START"]
          END   = os.environ["END"]
          FINNHUB_RPS = max(1, min(30, int(os.environ.get("FINNHUB_RPS") or "8")))
          MAX_DAYS = int(os.environ.get("MAX_DAYS_PER_TICKER") or "365")
          TICKER_CSV = os.environ["TICKER_CSV"]

          def read_universe(csv_path: str) -> list[str]:
              df = pd.read_csv(csv_path)
              col = [c for c in df.columns if c.lower()=="ticker"]
              if not col: return []
              return [str(x).strip().upper().replace(".", "-") for x in df[col[0]].dropna().unique().tolist()]

          token = os.getenv("FINNHUB_TOKEN")
          if finnhub is None or not token:
              raise SystemExit("Missing finnhub or FINNHUB_TOKEN")

          client = finnhub.Client(api_key=token)

          s_all = pd.Timestamp(START, tz="UTC").normalize()
          e_all = pd.Timestamp(END, tz="UTC").normalize()
          days = list(pd.date_range(s_all, e_all, freq="D", tz="UTC"))
          if MAX_DAYS and len(days) > MAX_DAYS:
              days = days[-MAX_DAYS:]

          min_gap = 1.0 / float(FINNHUB_RPS)
          last_call = 0.0

          def save_json(path: Path, obj):
              path.parent.mkdir(parents=True, exist_ok=True)
              with path.open("w", encoding="utf-8") as f:
                  json.dump(obj, f, ensure_ascii=False, indent=2)

          tickers = read_universe(TICKER_CSV)
          for t in tickers:
              base = Path(f"data/{t}/news/finnhub")
              base.mkdir(parents=True, exist_ok=True)
              saved = 0
              for dts in days:
                  day = dts.date().isoformat()
                  out = base / f"{day}.json"
                  if out.exists() and out.stat().st_size > 0:
                      continue

                  # Rate-limit
                  now = time.time()
                  wait = max(0.0, (last_call + min_gap) - now)
                  if wait > 0: time.sleep(wait)

                  # Call Finnhub (EXACT sample API)
                  try:
                      arr = client.company_news(t, _from=day, to=day) or []
                  except Exception as e:
                      msg = str(e)
                      if "429" in msg or "limit" in msg.lower():
                          time.sleep(1.5)
                          try:
                              arr = client.company_news(t, _from=day, to=day) or []
                          except Exception as e2:
                              print(f"[FH] {t} {day} rate-limited again: {e2}")
                              last_call = time.time()
                              continue
                      else:
                          print(f"[FH] {t} {day} error: {e}")
                          last_call = time.time()
                          continue
                  last_call = time.time()

                  cleaned = []
                  for it in arr:
                      try:
                          ts = pd.Timestamp.utcfromtimestamp(int(it.get("datetime"))).tz_localize("UTC").isoformat()
                      except Exception:
                          ts = None
                      cleaned.append({
                        "ts": ts,
                        "headline": it.get("headline"),
                        "summary": it.get("summary") or it.get("headline") or "",
                        "url": it.get("url"),
                        "source": it.get("source"),
                        "provider": "finnhub",
                        "raw": it
                      })
                  save_json(out, cleaned)
                  saved += 1
              print(f"[FH] {t}: wrote {saved} new day-files to {base}")

      - name: Save yfinance recent (max ~200) into per-day JSON
        env:
          YF_COUNT: ${{ github.event.inputs.yfinance_count }}
        shell: python
        run: |
          import os, json, pandas as pd, yfinance as yf
          from pathlib import Path

          START=os.environ["START"]; END=os.environ["END"]
          TICKER_CSV=os.environ["TICKER_CSV"]
          YF_COUNT = int(os.environ.get("YF_COUNT") or "240")

          def read_universe(csv_path: str) -> list[str]:
              df = pd.read_csv(csv_path)
              col = [c for c in df.columns if c.lower()=="ticker"]
              if not col: return []
              return [str(x).strip().upper().replace(".", "-") for x in df[col[0]].dropna().unique().tolist()]

          def norm_ts(v):
              if v is None: return None
              try:
                  vi = int(v)
                  if vi > 10_000_000_000: vi = vi/1000.0
                  return pd.Timestamp.utcfromtimestamp(vi).tz_localize("UTC")
              except Exception:
                  try:
                      return pd.to_datetime(v, utc=True, errors="coerce")
                  except Exception:
                      return None

          def save_json(path: Path, obj):
              path.parent.mkdir(parents=True, exist_ok=True)
              with path.open("w", encoding="utf-8") as f:
                  json.dump(obj, f, ensure_ascii=False, indent=2)

          s = pd.to_datetime(START, utc=True)
          e = pd.to_datetime(END, utc=True) + pd.Timedelta(days=1) - pd.Timedelta(seconds=1)

          for t in read_universe(TICKER_CSV):
              try:
                  items = yf.Ticker(t).get_news(count=YF_COUNT, tab="all") or []
              except Exception:
                  items = []
              rows = []
              for it in items:
                  content = it.get("content", {})
                  ts = (norm_ts(it.get("providerPublishTime"))
                        or norm_ts(content.get("pubDate"))
                        or norm_ts(content.get("displayTime"))
                        or norm_ts(content.get("published")))
                  if ts is None or pd.isna(ts) or ts < s or ts > e: 
                      continue
                  title = (content.get("title") or it.get("title") or "").strip()
                  if not title: 
                      continue
                  url = ((content.get("canonicalUrl") or {}).get("url")
                         or (content.get("clickThroughUrl") or {}).get("url")
                         or it.get("link") or it.get("url") or "")
                  summary = (content.get("summary") or content.get("description") or it.get("summary") or title).strip()
                  rows.append({
                      "ts": ts.isoformat(),
                      "headline": title,
                      "summary": summary,
                      "url": url,
                      "source": (content.get("provider") or {}).get("displayName") if isinstance(content.get("provider"), dict) else "Yahoo",
                      "provider": "yfinance",
                      "raw": it
                  })

              if not rows:
                  print(f"[YF] {t}: 0 items in window")
                  continue

              df = pd.DataFrame(rows)
              for day, grp in df.groupby(df["ts"].str.slice(0,10)):
                  out = Path(f"data/{t}/news/yfinance/{day}.json")
                  # merge if exists
                  merged = grp.to_dict(orient="records")
                  if out.exists() and out.stat().st_size>0:
                      try:
                          old = json.load(open(out, encoding="utf-8"))
                      except Exception:
                          old = []
                      # de-dup by (headline,url)
                      seen = {(o.get("headline",""),o.get("url","")) for o in old}
                      for r in merged:
                          key=(r.get("headline",""),r.get("url",""))
                          if key not in seen:
                              old.append(r); seen.add(key)
                      merged = old
                  save_json(out, merged)
              print(f"[YF] {t}: saved recent news per-day under data/{t}/news/yfinance")

      # ---------- DAILY SENTIMENT (4 decimals) ----------
      - name: Compute daily sentiment (Finnhub + yfinance) per day
        shell: python
        run: |
          import os, json, glob, pandas as pd
          from pathlib import Path
          from transformers import AutoTokenizer, AutoModelForSequenceClassification, pipeline

          START=os.environ["START"]; END=os.environ["END"]
          TICKER_CSV=os.environ["TICKER_CSV"]

          def read_universe(csv_path: str) -> list[str]:
              df = pd.read_csv(csv_path)
              col = [c for c in df.columns if c.lower()=="ticker"]
              if not col: return []
              return [str(x).strip().upper().replace(".", "-") for x in df[col[0]].dropna().unique().tolist()]

          model_name = "ProsusAI/finbert"
          tok = AutoTokenizer.from_pretrained(model_name)
          mdl = AutoModelForSequenceClassification.from_pretrained(model_name)
          clf = pipeline("sentiment-analysis", model=mdl, tokenizer=tok, return_all_scores=True, truncation=True)

          s = pd.to_datetime(START, utc=True).date()
          e = pd.to_datetime(END, utc=True).date()

          for t in read_universe(TICKER_CSV):
              base = Path(f"data/{t}")
              sent_dir = base/"sentiment"
              sent_dir.mkdir(parents=True, exist_ok=True)

              news_dirs = [base/"news"/"finnhub", base/"news"/"yfinance"]
              # Map day -> list[texts] with provider counts
              day_texts = {}

              for nd in news_dirs:
                  prov = nd.parts[-1] if nd.exists() else None
                  if not nd.exists(): 
                      continue
                  for p in sorted(glob.glob(str(nd/"*.json"))):
                      day = Path(p).stem
                      try:
                          ddate = pd.to_datetime(day, utc=True).date()
                      except Exception:
                          continue
                      if ddate < s or ddate > e: 
                          continue
                      try:
                          arr = json.load(open(p, encoding="utf-8")) or []
                      except Exception:
                          arr = []
                      if day not in day_texts:
                          day_texts[day] = {"texts": [], "counts": {"finnhub":0, "yfinance":0}}
                      for it in arr:
                          title = (it.get("headline") or "").strip()
                          if title:
                              day_texts[day]["texts"].append(title)
                              if prov in ("finnhub","yfinance"):
                                  day_texts[day]["counts"][prov] += 1

              for day, obj in day_texts.items():
                  out = sent_dir/f"{day}.json"
                  if out.exists() and out.stat().st_size>0:
                      continue
                  texts = obj["texts"]
                  if not texts:
                      json.dump({"date": day, "ticker": t, "n_total": 0, "n_finnhub": 0, "n_yfinance": 0, "score_mean": 0.0}, open(out,"w"), indent=2)
                      continue
                  preds = clf(texts, batch_size=16)
                  vals = []
                  for per in preds:
                      d = {x["label"].lower(): float(x["score"]) for x in per}
                      s_val = d.get("positive",0.0) - d.get("negative",0.0)
                      vals.append(s_val)
                  mean = round(float(pd.Series(vals).mean()), 4)
                  json.dump({
                    "date": day,
                    "ticker": t,
                    "n_total": len(texts),
                    "n_finnhub": obj["counts"]["finnhub"],
                    "n_yfinance": obj["counts"]["yfinance"],
                    "score_mean": mean
                  }, open(out,"w"), indent=2)
              print(f"[SENT] {t}: daily sentiment saved under data/{t}/sentiment")

      # ---------- Commit & push data directory ----------
      - name: Commit & push data directory (force-add ignored)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global pull.rebase true
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          if [ -d data ]; then
            git add -f data/** || true
            git add -f data/*  || true
          fi
          if git diff --cached --quiet; then
            echo "No changes to commit in data/."
          else
            git commit -m "chore(data): persist historical Finnhub & yfinance news + daily sentiment [skip ci]"
            git pull --rebase || true
            git push || true
          fi

      # ---------- Smoke inspect ----------
      - name: Inspect saved historical artifacts (AAPL)
        shell: bash
        run: |
          set -euo pipefail
          echo "== Tree sample =="
          find data -maxdepth 3 -type d | sort | head -n 40
          echo "== AAPL Finnhub sample files =="
          ls -l data/AAPL/news/finnhub | head || true
          echo "== AAPL yfinance sample files =="
          ls -l data/AAPL/news/yfinance | head || true
          echo "== AAPL sentiment sample files =="
          ls -l data/AAPL/sentiment | head || true

      # ---------- (Optional) build app JSON & web ----------
      - name: Setup Node.js (with npm cache)
        if: ${{ hashFiles('apps/web/package-lock.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: apps/web/package-lock.json

      - name: Setup Node.js (no cache)
        if: ${{ hashFiles('apps/web/package-lock.json') == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install web deps (ci if lockfile, else install)
        working-directory: apps/web
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci --no-audit --no-fund
          else
            npm install --no-audit --no-fund
          fi
          npm i -D @types/react @types/node --no-audit --no-fund || true

      - name: Build static site (create out/ from .next)
        working-directory: apps/web
        env:
          NEXT_TELEMETRY_DISABLED: "1"
          NEXT_PUBLIC_BASE_PATH: ${{ env.NEXT_PUBLIC_BASE_PATH }}
        shell: bash
        run: |
          set -euo pipefail
          echo "==== next.config.cjs ===="
          cat next.config.cjs || true
          echo "==== Node/NPM ===="
          node -v
          npm -v

          npm run build

          echo "==== Prepare out/ ===="
          if [ -d "out" ]; then
            echo "Next produced out/ already. Using it."
          else
            echo "No out/ from Next; synthesizing from .next artifacts..."
            rm -rf out
            mkdir -p out

            # Copy static assets
            if [ -d ".next/static" ]; then
              mkdir -p out/_next
              rsync -a .next/static out/_next/static
            fi

            # Copy public assets (includes /data/**)
            rsync -a public/ out/

            # Copy App Router HTML to route-style folders
            if [ -d ".next/server/app" ]; then
              find .next/server/app -type f -name 'index.html' -print0 | while IFS= read -r -d '' f; do
                rel="${f#.next/server/app}"
                dir="${rel%/index.html}"
                mkdir -p "out/${dir}"
                cp "$f" "out/${dir}/index.html"
              done
              find .next/server/app -type f -name '*.html' ! -name 'index.html' -print0 | while IFS= read -r -d '' f; do
                rel="${f#.next/server/app/}"
                rel_noext="${rel%.html}"
                mkdir -p "out/${rel_noext}"
                cp "$f" "out/${rel_noext}/index.html"
              done
            fi

            # 404 fallback for GH Pages
            if [ -f ".next/server/app/_not-found.html" ]; then
              cp ".next/server/app/_not-found.html" "out/404.html" || true
            elif [ ! -f "out/404.html" ] && [ -f "out/index.html" ]; then
              cp "out/index.html" "out/404.html" || true
            fi
          fi

          touch out/.nojekyll

          echo "==== Final out/ listing ===="
          find out -maxdepth 3 -type f | sort

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: apps/web/out

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
