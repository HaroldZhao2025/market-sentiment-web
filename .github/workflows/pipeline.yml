name: Build Data & Deploy Site

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      sample_ticker:
        description: "Build only AAPL (fast sample)"
        required: false
        default: "false"
  schedule:
    - cron: "0 12 * * 1"

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

env:
  PYTHONPATH: src
  HF_HUB_DISABLE_TELEMETRY: "1"
  # Set this to true in 'Run workflow' to build only AAPL
  SAMPLE_TICKER: ${{ github.event.inputs.sample_ticker || 'false' }}
  # GitHub Pages subpath for this repo
  NEXT_PUBLIC_BASE_PATH: "/market-sentiment-web"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Python & deps ----------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install Python deps
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip wheel setuptools
          # CPU torch to avoid GPU wheel pulls
          pip install --no-cache-dir "torch==2.3.1" --index-url https://download.pytorch.org/whl/cpu
          pip install --no-cache-dir -r requirements.txt
          pip check

      - name: Set Hugging Face cache dir
        run: echo "HF_HOME=$RUNNER_TEMP/hf-home" >> "$GITHUB_ENV"

      - name: Set date window (last 365 days)
        run: |
          python - <<'PY'
          import os
          from datetime import datetime, timedelta, timezone
          end = datetime.now(timezone.utc)
          start = end - timedelta(days=365)
          with open(os.environ['GITHUB_ENV'],'a') as f:
              f.write(f"START={start.strftime('%Y-%m-%d')}\n")
              f.write(f"END={end.strftime('%Y-%m-%d')}\n")
          print("START:", start.date(), "END:", end.date())
          PY

      # ---------- Universe ----------
      - name: Build S&P 500 universe
        run: python -m market_sentiment.cli.build_universe --out data/sp500.csv

      - name: (Optional) Reduce universe to AAPL only
        if: env.SAMPLE_TICKER == 'true'
        run: |
          set -euxo pipefail
          echo "ticker" > data/sp500.csv
          echo "AAPL" >> data/sp500.csv
          echo "Using sample universe: "; cat data/sp500.csv

      # ---------- Data build ----------
      - name: Build JSON (FinBERT + News + Earnings)
        env:
          HF_HOME: ${{ env.HF_HOME }}
        run: |
          set -euxo pipefail
          python -m market_sentiment.cli.build_json \
            --universe data/sp500.csv \
            --start "$START" --end "$END" \
            --out apps/web/public/data \
            --batch 16 \
            --cutoff-minutes 5 \
            --max-workers 8

      # ---------- Inspect outputs (pure Python; no jq) ----------
      - name: Inspect output (summary + samples)
        run: |
          set -euxo pipefail
          echo "== List data dir =="
          ls -lah apps/web/public/data || true

          python - <<'PY'
          import json, os, glob
          base = "apps/web/public/data"
          tickers_file = os.path.join(base, "_tickers.json")

          # Summary
          tickers = []
          if os.path.exists(tickers_file):
              try:
                  tickers = json.load(open(tickers_file))
              except Exception:
                  tickers = []
          print("Tickers listed:", len(tickers))

          tdir = os.path.join(base, "ticker")
          files = sorted(glob.glob(os.path.join(tdir, "*.json")))
          print("Ticker JSON files:", len(files))

          # Portfolio presence
          pfile = os.path.join(base, "portfolio.json")
          print("Portfolio present:", os.path.exists(pfile))
          if os.path.exists(pfile):
              try:
                  p = json.load(open(pfile))
                  print("Portfolio dates:", len(p.get("dates", [])))
              except Exception as e:
                  print("Portfolio parse error:", e)

          # Sample: AAPL first/last
          aapl_file = os.path.join(tdir, "AAPL.json")
          if os.path.exists(aapl_file):
              aapl = json.load(open(aapl_file))
              s = aapl.get("sentiment") or aapl.get("S") or []
              print("AAPL sentiment sample:", {
                  "len": len(s),
                  "first": (s[0] if s else None),
                  "last": (s[-1] if s else None),
              })
          else:
              print("AAPL.json not found")

          # Guaranteed non-zero sample (if any exist)
          print("== Find first ticker with any non-zero sentiment ==")
          found = False
          for p in files[:300]:
              try:
                  j = json.load(open(p))
              except Exception:
                  continue
              arr = j.get("sentiment") or j.get("S") or []
              nz = [abs(float(x)) for x in arr if x is not None and abs(float(x)) > 1e-6]
              if nz:
                  from os.path import basename
                  print("Sample:", basename(p), "len=", len(arr), "first_nonzero=", nz[0])
                  found = True
                  break
          if not found:
              print("No non-zero sentiment found in first 300 files.")
          PY

      # ---------- Node / Next build ----------
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install web deps
        working-directory: apps/web
        run: npm install --no-audit --no-fund

      - name: Build static site (Next.js output: export)
        working-directory: apps/web
        env:
          NEXT_TELEMETRY_DISABLED: "1"
          NEXT_PUBLIC_BASE_PATH: ${{ env.NEXT_PUBLIC_BASE_PATH }}
        run: |
          set -euxo pipefail
          echo "==== next.config.cjs (contents) ===="
          cat next.config.cjs || true

          echo "==== Node/NPM ===="
          node -v
          npm -v

          echo "==== Building ===="
          npm run build

          echo "==== After build (ls) ===="
          ls -lah

          # Guard & fallback: ensure 'out' exists, else synthesize
          if [ ! -d "out" ]; then
            echo "Warning: No 'out/' after build; synthesizing static export from '.next'..."
            mkdir -p out/_next/static
            # Copy Next static assets
            rsync -a .next/static/ out/_next/static/ || true
            # Copy pre-rendered app routes (RSC build output)
            rsync -a .next/server/app/ out/ || true
            # Ensure public/ is present (contains /data JSON)
            rsync -a public/ out/ || true
          fi

          echo "==== Final out/ listing ===="
          ls -lah out || { echo "::error::No 'out/' directory after synthesis"; exit 1; }

      # ---------- Pages ----------
      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: apps/web/out

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
