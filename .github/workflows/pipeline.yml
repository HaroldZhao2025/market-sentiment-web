name: Build Data & Deploy Site

on:
  push:
    branches: ["main"]
  workflow_dispatch:
  schedule:
    - cron: "0 12 * * 1"

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: src
      HF_HUB_DISABLE_TELEMETRY: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install --no-cache-dir "torch==2.3.1" --index-url https://download.pytorch.org/whl/cpu
          pip install --no-cache-dir -r requirements.txt
          pip check

      - name: Set Hugging Face cache dir
        run: echo "HF_HOME=$RUNNER_TEMP/hf-home" >> $GITHUB_ENV

      - name: Set dates (last 365 days)
        run: |
          python - <<'PY'
          import os
          from datetime import datetime, timedelta, timezone
          start=(datetime.now(timezone.utc)-timedelta(days=365)).strftime('%Y-%m-%d')
          end=datetime.now(timezone.utc).strftime('%Y-%m-%d')
          with open(os.environ['GITHUB_ENV'],'a') as f:
              f.write(f"START={start}\nEND={end}\n")
          print("START", start, "END", end)
          PY

      - name: Build S&P 500 universe
        run: python -m market_sentiment.cli.build_universe --out data/sp500.csv

      - name: Build JSON (FinBERT + Yahoo News + SEC/EDGAR)
        env:
          HF_HOME: ${{ env.HF_HOME }}
          SEC_EMAIL: ${{ secrets.SEC_EMAIL }}   # required by SEC; set in repo secrets to a real email string
        run: |
          python -m market_sentiment.cli.build_json \
            --universe data/sp500.csv \
            --start "$START" --end "$END" \
            --out apps/web/public/data \
            --batch 16

      - name: Inspect raw files (quick peek)
        run: |
          ls -lah apps/web/public/data || true
          (test -f apps/web/public/data/_tickers.json && head -n 40 apps/web/public/data/_tickers.json) || true
          (test -f apps/web/public/data/portfolio.json && head -n 40 apps/web/public/data/portfolio.json) || true

      - name: Summarize output (news & sentiment QA)
        run: |
          python - <<'PY'
          import os, json, math, glob
          from statistics import mean
          DATA="apps/web/public/data"
          tickers_file=os.path.join(DATA,"_tickers.json")
          if not os.path.exists(tickers_file):
              print("::warning ::_tickers.json missing")
              tickers=[]
          else:
              tickers=json.load(open(tickers_file))
          print(f"Tickers listed: {len(tickers)}")

          files=sorted(glob.glob(os.path.join(DATA,"*.json")))
          files=[f for f in files if not os.path.basename(f).startswith(("_","portfolio"))]

          total=len(files)
          with_news=0
          with_nonzeroS=0
          examples=[]
          for f in files:
              j=json.load(open(f))
              sym=j.get("ticker") or os.path.splitext(os.path.basename(f))[0]
              news=j.get("news") or []
              ser=j.get("series") or []
              if news: with_news+=1
              if ser:
                  S=[abs((pt.get("S") or 0.0)) for pt in ser]
                  nz=[s for s in S if s and not math.isclose(s, 0.0, abs_tol=1e-12)]
                  if nz: 
                      with_nonzeroS+=1
                      if len(examples)<5:
                          examples.append((sym, round(mean(nz), 4), len(nz)))
          print(f"Ticker JSON files: {total}")
          print(f"Tickers with any news: {with_news}/{total}")
          print(f"Tickers with non-zero sentiment S: {with_nonzeroS}/{total}")
          if examples:
              print("Sample tickers with mean|S| > 0:")
              for sym,m,n in examples:
                  print(f"  {sym}: mean|S|={m} (nz_points={n})")
          port=os.path.join(DATA,"portfolio.json")
          print(f"Portfolio present: {'yes' if os.path.exists(port) else 'no'}")
          PY

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install web deps
        working-directory: apps/web
        run: npm install --no-audit --no-fund

      - name: "Build static site (Next.js output: export)"
        working-directory: apps/web
        env:
          NEXT_TELEMETRY_DISABLED: "1"
          NEXT_PUBLIC_BASE_PATH: "/market-sentiment-web"
        run: |
          echo "Config files present:" && ls -lah | egrep 'next.config' || true
          node -v
          npm -v
          npm run build
          echo "Contents after build:" && ls -lah
          test -d out || { echo "::error::Expected 'apps/web/out' to exist after build, but it does not."; exit 1; }

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: apps/web/out

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
