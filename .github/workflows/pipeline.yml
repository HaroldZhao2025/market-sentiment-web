name: Build & Deploy (AAPL sample)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  NEXT_PUBLIC_BASE_PATH: "/market-sentiment-web"
  PYTHONUNBUFFERED: "1"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------------- Python: build JSON for AAPL only ----------------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip wheel setuptools
          if [ -f requirements.txt ]; then
            pip install --no-cache-dir "torch==2.3.1" --index-url https://download.pytorch.org/whl/cpu
            pip install --no-cache-dir -r requirements.txt
            pip check
          else
            pip install --no-cache-dir pandas yfinance feedparser tqdm requests \
              torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
            pip install --no-cache-dir transformers
          fi

      - name: Set dates (last 365 days)
        run: |
          if date -u -d "365 days ago" +%F >/dev/null 2>&1; then
            START=$(date -u -d "365 days ago" +%F)
            END=$(date -u +%F)
          else
            START=$(python -c 'from datetime import datetime,timedelta;print((datetime.utcnow()-timedelta(days=365)).strftime("%Y-%m-%d"))')
            END=$(python -c 'from datetime import datetime;print(datetime.utcnow().strftime("%Y-%m-%d"))')
          fi
          echo "START=$START" >> $GITHUB_ENV
          echo "END=$END" >> $GITHUB_ENV
          echo "Using range: $START .. $END"

      - name: Build JSON (AAPL only)
        env:
          PYTHONPATH: src
          HF_HUB_DISABLE_TELEMETRY: "1"
          HF_HOME: ${{ runner.temp }}/hf-home
        run: |
          set -euxo pipefail
          mkdir -p data
          echo "AAPL" > data/_sample_universe.csv
          python -m market_sentiment.cli.build_json \
            --universe data/_sample_universe.csv \
            --start "$START" --end "$END" \
            --out apps/web/public/data \
            --batch 16 \
            --cutoff-minutes 5 \
            --max-workers 8
          echo "== List data dir =="
          ls -lah apps/web/public/data

      - name: Inspect generated data (quick checks)
        run: |
          python -c 'import json,os; p="apps/web/public/data/_tickers.json"; print("Tickers listed:", len(json.load(open(p))))'
          python -c 'import json,os,math; p="apps/web/public/data/ticker/AAPL.json"; d=json.load(open(p)) if os.path.exists(p) else {}; S=d.get("S",[]) or d.get("sentiment",[]); nz=sum(1 for x in S if abs(x)>1e-9); print({"AAPL_len":len(S),"first":(S[0] if S else None),"last":(S[-1] if S else None),"non_zero_points":nz})'

      # ---------------- Node: build static Next.js site ----------------
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "apps/web/package-lock.json"

      - name: Install web deps
        working-directory: apps/web
        run: npm ci --no-audit --no-fund

      - name: Build static site (Next.js output: export)
        working-directory: apps/web
        env:
          NEXT_TELEMETRY_DISABLED: "1"
          NEXT_PUBLIC_BASE_PATH: ${{ env.NEXT_PUBLIC_BASE_PATH }}
        run: |
          set -euxo pipefail
          echo "==== next.config.cjs ===="
          cat next.config.cjs || true
          node -v; npm -v
          npm run build
          # Fallback: synthesize out/ if Next didn't emit it
          if [ ! -d out ]; then
            echo "No 'out/' after build; assembling export for GH Pages..."
            mkdir -p out/_next/static
            [ -d ".next/static" ] && cp -R .next/static/* out/_next/static/ || true
            [ -d "public" ] && rsync -a public/ out/ || true
            # root + portfolio
            for p in "" "portfolio"; do
              SRC=".next/server/app/${p}/index.html"
              if [ -f "$SRC" ]; then
                DST="out/${p}"
                mkdir -p "$DST"
                cp "$SRC" "$DST/index.html"
              fi
            done
            # AAPL ticker & earnings
            for sym in AAPL aapl; do
              for route in "ticker" "earnings"; do
                SRC=".next/server/app/${route}/${sym}/index.html"
                if [ -f "$SRC" ]; then
                  mkdir -p "out/${route}/${sym}"
                  cp "$SRC" "out/${route}/${sym}/index.html"
                fi
              done
            done
          fi
          echo "==== Final out/ listing ===="; ls -lah out
          test -d out/data || (echo "::error::out/data missing"; exit 1)

      # ---------------- Deploy to GitHub Pages ----------------
      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: apps/web/out

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
