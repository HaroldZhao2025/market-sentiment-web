name: Build Data & Deploy Site

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      mode:
        description: "Run mode: sample (AAPL) or full (S&P500)"
        required: true
        default: "sample"
        type: choice
        options: ["sample", "full"]
  schedule:
    - cron: "0 12 * * 1"

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

env:
  PYTHONPATH: src
  HF_HUB_DISABLE_TELEMETRY: "1"
  NEXT_PUBLIC_BASE_PATH: "/market-sentiment-web"
  MODE: ${{ github.event.inputs.mode || 'sample' }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Python ----------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install Python dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip wheel setuptools
          pip install --no-cache-dir "torch==2.3.1" --index-url https://download.pytorch.org/whl/cpu
          pip install --no-cache-dir -r requirements.txt
          pip install --no-cache-dir feedparser requests yfinance pandas_datareader

      - name: Configure HF cache
        run: echo "HF_HOME=$RUNNER_TEMP/hf-home" >> "$GITHUB_ENV"

      - name: Set date range (last 365 days)
        run: |
          python - <<'PY'
          import os
          from datetime import datetime, timedelta, timezone
          start=(datetime.now(timezone.utc)-timedelta(days=365)).strftime('%Y-%m-%d')
          end=datetime.now(timezone.utc).strftime('%Y-%m-%d')
          with open(os.environ['GITHUB_ENV'],'a') as f:
              f.write(f"START={start}\nEND={end}\n")
          print("START", start, "END", end)
          PY

      - name: Select mode and universe
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data
          if [ "${MODE}" = "full" ]; then
            TICKER_CSV="data/sp500.csv"
          else
            TICKER_CSV="data/sample_one.csv"
            printf "ticker\nAAPL\n" > "$TICKER_CSV"
          fi
          echo "TICKER_CSV=$TICKER_CSV" >> "$GITHUB_ENV"
          echo "Mode: ${MODE} | Universe: ${TICKER_CSV}"

      - name: Smoke test — news providers + FinBERT (AAPL)
        env:
          HF_HOME: ${{ env.HF_HOME }}
        continue-on-error: true
        run: |
          python - <<'PY'
          import pandas as pd
          import yfinance as yf

          # Import providers robustly; some may not exist in the current commit
          from market_sentiment.news import fetch_news
          try:
              from market_sentiment.news import _prov_google_rss
          except Exception: _prov_google_rss = None
          try:
              from market_sentiment.news import _prov_yahoo_rss
          except Exception: _prov_yahoo_rss = None
          try:
              from market_sentiment.news import _prov_nasdaq_rss
          except Exception: _prov_nasdaq_rss = None
          try:
              from market_sentiment.news import _prov_bizinsider_rss
          except Exception: _prov_bizinsider_rss = None
          try:
              from market_sentiment.news import _prov_yfinance
          except Exception: _prov_yfinance = None

          try:
              from market_sentiment.finbert import FinBERT
          except Exception:
              FinBERT = None

          START="${{ env.START }}"; END="${{ env.END }}"

          print("== yfinance raw count ==")
          try:
              raw = yf.Ticker("AAPL").news or []
              print("yfinance.Ticker('AAPL').news:", len(raw))
              if raw:
                  print("first keys:", list(raw[0].keys())[:5])
          except Exception as e:
              print("yfinance error:", e)

          providers = []
          for name, fn in [("google_rss", _prov_google_rss),
                           ("yahoo_rss", _prov_yahoo_rss),
                           ("nasdaq_rss", _prov_nasdaq_rss),
                           ("bizinsider_rss", _prov_bizinsider_rss),
                           ("yfinance", _prov_yfinance)]:
              if fn is not None:
                  providers.append((name, fn))

          total = 0
          for name, fn in providers:
              try:
                  df = fn("AAPL", START, END, "Apple Inc.", 120)
                  print(f"{name:15s} rows:", len(df))
                  if len(df):
                      print(df[["ts","title"]].tail(3).to_string(index=False))
                  total += len(df)
              except Exception as e:
                  print(f"{name} error:", e)

          try:
              all_df = fetch_news("AAPL", START, END, "Apple Inc.", max_per_provider=120)
              print("fetch_news rows:", len(all_df))
              if len(all_df):
                  print(all_df[["ts","title"]].tail(3).to_string(index=False))
          except Exception as e:
              print("fetch_news error:", e)
              all_df = pd.DataFrame()

          if len(all_df) and FinBERT is not None:
              texts = (all_df["title"].fillna('') + ' ' + all_df["text"].fillna('')).astype(str).tolist()[:16]
              try:
                  fb = FinBERT()
                  try:
                      scores = fb.score(texts, batch=16)
                  except TypeError:
                      scores = fb.score(texts)
                  s = pd.Series(scores).astype(float)
                  print("FinBERT sample:", s.round(4).tolist(), "mean:", float(s.mean()))
              except Exception as e:
                  print("FinBERT error:", e)
          else:
              print("Skip FinBERT (no texts or FinBERT missing).")
          PY

      - name: Smoke test — AAPL prices
        continue-on-error: true
        run: |
          python - <<'PY'
          from market_sentiment.prices import fetch_prices_yf
          p = fetch_prices_yf("AAPL", "${{ env.START }}", "${{ env.END }}")
          print("AAPL prices rows:", len(p))
          if not p.empty:
              print(p.head(2).to_string(index=False))
              print(p.tail(2).to_string(index=False))
          PY

      - name: Build JSON data (prices + news)
        env:
          HF_HOME: ${{ env.HF_HOME }}
        run: |
          set -euo pipefail
          echo "Build JSON for $(wc -l < "$TICKER_CSV" | tr -d ' ') tickers | batch=16 cutoff_min=5 max_workers=8"
          python -m market_sentiment.cli.build_json \
            --universe "$TICKER_CSV" \
            --start "$START" --end "$END" \
            --out apps/web/public/data \
            --batch 16 \
            --cutoff-minutes 5 \
            --max-workers 8

      - name: Inspect generated data (AAPL)
        run: |
          set -euo pipefail
          echo "== List data dir =="
          ls -lah apps/web/public/data
          python - <<'PY'
          import json, os
          base="apps/web/public/data"
          tfile=os.path.join(base,"ticker","AAPL.json")
          if os.path.exists(tfile):
              obj=json.load(open(tfile))
              S = obj.get("S") or obj.get("sentiment") or []
              nz=sum(1 for x in S if abs(x or 0)>1e-12)
              print("AAPL sentiment: len=",len(S)," non_zero=",nz," first=",S[0] if S else None," last=",S[-1] if S else None)
              print("AAPL news items:", len(obj.get("news") or []))
          else:
              print("AAPL.json not found")
          print("tickers listed:", len(json.load(open(os.path.join(base,"_tickers.json")))))
          PY

      # ---------- Node / Next ----------
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: apps/web/package-lock.json

      - name: Install web deps
        working-directory: apps/web
        run: npm ci --no-audit --no-fund

      - name: Build static site (Next.js export)
        working-directory: apps/web
        env:
          NEXT_TELEMETRY_DISABLED: "1"
          NEXT_PUBLIC_BASE_PATH: ${{ env.NEXT_PUBLIC_BASE_PATH }}
        run: |
          set -euo pipefail
          echo "==== next.config.cjs (contents) ===="
          cat next.config.cjs || true
          echo "==== Node/NPM ===="
          node -v
          npm -v
          echo "==== Building ===="
          npx next build
          npx next export
          echo "==== Verify export ===="
          test -f out/index.html
          # assert AAPL page exists in sample mode
          if [ "${MODE}" = "sample" ]; then
            test -f out/ticker/AAPL/index.html
          fi
          echo "==== out/ tree (head) ===="
          ls -lah out || true
          ls -lah out/ticker || true
          ls -lah out/ticker/AAPL || true

      # ---------- GitHub Pages ----------
      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: apps/web/out

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
