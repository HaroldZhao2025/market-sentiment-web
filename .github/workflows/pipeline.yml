name: Deploy â€” Sample (AAPL only)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  HF_HOME: ${{ github.workspace }}/.hf-cache
  HF_HUB_DISABLE_TELEMETRY: "1"
  NEXT_PUBLIC_BASE_PATH: "/market-sentiment-web"
  # News dials (tweak if you like)
  NEWS_ITEMS_PER_SOURCE: "60"
  # NEWS_SOURCES: "yfinance,google,bing,yahoosearch,yahoofin,nasdaq,sa,globe,bw"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Python for data build ----------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip & HF
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ${{ env.HF_HOME }}
          key: pip-hf-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-hf-${{ runner.os }}-

      - name: Install Python deps
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            # Fallback if no requirements.txt (keeps CI green)
            pip install pandas yfinance feedparser torch torchvision torchaudio transformers tqdm
          fi

      - name: Build JSON data (AAPL only)
        env:
          START: ${{ github.event_name == 'workflow_dispatch' && inputs.start || '' }}
          END:   ${{ github.event_name == 'workflow_dispatch' && inputs.end || '' }}
        run: |
          set -euxo pipefail
          mkdir -p data
          # Minimal universe hard-coded to AAPL
          printf "AAPL\n" > data/sample.csv
          # Date window: last 365 days
          START=$(date -u -d "365 days ago" +%F)
          END=$(date -u +%F)
          echo "Building JSON for AAPL from $START to $END"

          export PYTHONPATH=src
          python -m market_sentiment.cli.build_json \
            --universe data/sample.csv \
            --start "$START" --end "$END" \
            --out apps/web/public/data \
            --batch 16 \
            --cutoff-minutes 5 \
            --max-workers 8

      - name: Inspect data
        run: |
          set -euxo pipefail
          echo "== List data dir =="
          ls -lah apps/web/public/data
          python - <<'PY'
          import json, pathlib

          base = pathlib.Path("apps/web/public/data")
          tickers = json.loads((base / "_tickers.json").read_text())
          print("Tickers listed:", len(tickers))

          aapl = json.loads((base / "ticker" / "AAPL.json").read_text())
          S = aapl.get("S") or aapl.get("sentiment") or []
          print("AAPL sentiment sample:", {
              "len": len(S),
              "first": (S[0] if S else None),
              "last": (S[-1] if S else None),
              "non_zero_points": sum(1 for x in S if abs(x) > 1e-9)
          })
          PY



      # ---------- Node/Next.js build ----------
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install web deps
        working-directory: apps/web
        run: npm ci --no-audit --no-fund

      - name: Build static site (Next.js output: export)
        working-directory: apps/web
        env:
          NEXT_TELEMETRY_DISABLED: "1"
          NEXT_PUBLIC_BASE_PATH: ${{ env.NEXT_PUBLIC_BASE_PATH }}
        run: |
          set -euxo pipefail
          echo "==== Node/NPM ===="; node -v; npm -v
          echo "==== next.config.cjs (contents) ===="; cat next.config.cjs || true
          npm run build

          # If Next didn't produce out/, synthesize a static export
          if [ ! -d out ] || [ ! -f out/index.html ]; then
            echo "Warning: No 'out/' after build; synthesizing static export from '.next'..."
            rm -rf out
            mkdir -p out/_next/static
            # copy RSC/HTML shells
            cp -r .next/server/app/* out/ 2>/dev/null || true
            # copy client static assets
            cp -r .next/static/* out/_next/static/ 2>/dev/null || true
            # copy public (includes /data)
            cp -r public/* out/ 2>/dev/null || true
          fi

          echo "==== Final out/ listing ===="
          ls -lah out
          find out -maxdepth 2 -type d -print

      # ---------- Pages deploy ----------
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: apps/web/out

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
